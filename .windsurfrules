## Tech Stack
- **Front-end:** React 19 ([Docs](https://reactjs.org/docs/getting-started.html))
- **Styling:** Tailwindcss 4 ([Docs](https://tailwindcss.com/docs))
- **Tailwind Plugin**: Tailwind Variants ([Docs](https://www.tailwind-variants.org/docs/introduction))
- **Language:** Typescript
- **Package Manager:** NPM
- **Icon Library:** lucide-react ([Docs](https://lucide.dev/))
- **Testing:** Jest ([Docs](https://jestjs.io/docs/getting-started))
- **OS:** Windows 10

## Project structure
1. Follow the Bulletproof React architecture pattern (refer to: https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md) and Atomic Design principles:
- src/
    - components/ 
        - element/(the smallest possible UI elements.  Designed to be simple, reusable, and focused on a single purpose.)
           - [Component Category] (the general group or function of the component (e.g., Cards, Buttons).)
                - [component-name] / 
                    - parts/ (the sub-components and the component itself)
                    - stories / (stories for this component)
                        - [component-name].stories.tsx (story file for this component)
                    - tests/ (unit tests for this component and its parts)
                    - hooks/ (hooks used only by this component)
                    - providers / (provider used for this component)
                    - [component-name].d.ts (TypeScript types for this component)
                    - [component-name].mock.ts (JSON mock data for testing and demo)
                    - [component-name].config.ts (configuration file for Tailwind variants)
                    - README.md (component documentation and tracking version history)
                    - index.tsx (main export entry file)
        - composite/ (formed by combining two or more elements (atoms) to create functional and reusable UI units. They represent slightly more complex elements that perform specific tasks)
            -[Component Category]/...
        - section/ (complex UI components composed of elements (atoms) and composites (molecules). They represent distinct, self-contained areas of a page)
            -[Component Category]/...
        - template/ (define the overall structure and layout of a page.They are composed of sections and define the placement and arrangement of content, providing a consistent framework for different pages within your application) 
            -[Component Category]/...
    - hooks/ (shared hooks used across the application)
    - providers/ (application providers)
    - stores/ (global state stores)
    - types/ (shared TypeScript types)
    - utils/ (shared utility functions)
    - assets/ (static files like images, fonts, etc.)

## Key Command
#### 1. `i [number]` - Follow strictly step by step instruction [number] in the "docs\instructions.md" file. You must read through every section (Objective, Input, Expected Output, Knowledge, Important Notes) of that instruction to understand the task.
Example: `i 1.01` means "Follow strictly step by step instruction 1.01 in the "docs\instructions.md" file. You must read through every section (Objective, Input, Expected Output, Knowledge, Important Notes) of that instruction to understand the task."

### 2. `commit` - Commit the changes you have made so far and push to the remote Github repo

## Instruction Guideline (docs/instructions.md)
- Each requested instruction is identified by a unique number. Check the "Index" section of the "docs\instructions.md" file to locate the instruction you need to follow 
- Do not jump to other instructions without my permission
- Each instruction requires a specific input (retrieved from the Context section) and specific Knowledge (defined in the "Knowledge" section of each instruction). Thus, you should always read through the Objective, Input, Expected Output,and Knowledge section of each instruction before performing the task.
- Start each instruction by notifying me which one you are working on 
- For each step completed, notify me a short, concise step message. For example, ` âœ… step 1: [summary completed task]`

## As a senior React developer with a flair for UI and UX design, you will create well-written, concise, scalable and maintainable UI library. You will ALWAYS:
- Follow strictly the defined standard project structure [Project structure](#project-structure)
- Review carefully the "docs/code-patterns.md" file before generating any code and follow strictly the "Rules" section for each template
- Follow strictly step by step instructions defined in "docs\instructions.md" when asked
- Code with mobile-first, apply responsive principles for flexibility across devices.
- Reuse components from `components` folder only
- Use Tailwind Variants for variant-based styling
- Proper ref forwarding

## Side notes
- When creating new folders using terminal commands, create one by one by using `mkdir`. DONT USE `mkdir -p`


